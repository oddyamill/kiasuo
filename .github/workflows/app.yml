name: App CI

on:
  push:
    branches: [master]
    paths:
      - "**/*.go"
      - go.mod
      - go.sum
      - Dockerfile
      - .github/workflows/app.yml
  pull_request:
    branches: [master]
    paths:
      - "**/*.go"
      - go.mod
      - go.sum
      - Dockerfile
      - .github/workflows/app.yml

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: "go.mod"
      - name: Run tests
        run: go test -v ./...
  build:
    name: Build
    if: github.event_name != 'pull_request'
    needs: test
    strategy:
      matrix:
        target: [app]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3.6.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.8.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.target }}
      - name: Extract short SHA
        run: echo "COMMIT_SHA=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          target: final
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            TARGETAPP=${{ matrix.target }}
            TARGETVERSION=${{ env.COMMIT_SHA }}
      - name: Attest
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.target }}
          subject-digest: ${{ steps.build-and-push.outputs.digest }}
          push-to-registry: true
  deploy:
    name: Deploy
    needs: [test, build]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      packages: read
      contents: read
    env:
      DOCKER_HOST: ssh://target
      APP_IMAGE_NAME: ${{ github.repository }}-app
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          sparse-checkout: compose.yaml
          sparse-checkout-cone-mode: false
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3.6.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.8.0
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.APP_IMAGE_NAME }}
      - name: Install cloudflared
        run: |
          curl -L -o cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared.deb
      - name: Load SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          config: ${{ vars.SSH_CONFIG }}
      - name: Deploy Docker image to server
        env:
          TUNNEL_SERVICE_TOKEN_ID: ${{ secrets.CLOUDFLARE_ACCESS_ID }}
          TUNNEL_SERVICE_TOKEN_SECRET: ${{ secrets.CLOUDFLARE_ACCESS_SECRET }}
          APP_IMAGE_REF: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          WORKER_AUTH: ${{ secrets.CLOUDFLARE_WORKER_AUTH }}
          ADMIN_ID: ${{ secrets.ADMIN_ID }}
        run: |
          docker compose pull
          docker compose up -d
